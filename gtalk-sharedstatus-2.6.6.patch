Patch for implementing Google Talk Shared-status in pidgin-2.6.6.

Updated for 2.6.6 by:

Dan Lenski
dlenski [at] gmail [dot] com

Based on the version for 2.6.3 by:

Ayan Chakrabarti
ayan.chakrabarti [at] gmail [dot] com


diff --git a/libpurple/protocols/jabber/buddy.c b/libpurple/protocols/jabber/buddy.c
index 5647b7e..54f0a16 100644
--- a/libpurple/protocols/jabber/buddy.c
+++ b/libpurple/protocols/jabber/buddy.c
@@ -1927,6 +1927,8 @@ jabber_buddy_state_get_name(JabberBuddyState state)
 			return _("Away");
 		case JABBER_BUDDY_STATE_XA:
 			return _("Extended Away");
+	        case JABBER_BUDDY_STATE_INVISIBLE:
+			return _("Invisible");
 		case JABBER_BUDDY_STATE_DND:
 			return _("Do Not Disturb");
 	}
@@ -1945,6 +1947,8 @@ JabberBuddyState jabber_buddy_status_id_get_state(const char *id) {
 		return JABBER_BUDDY_STATE_AWAY;
 	if(!strcmp(id, "extended_away"))
 		return JABBER_BUDDY_STATE_XA;
+	if(!strcmp(id, "invisible"))
+		return JABBER_BUDDY_STATE_INVISIBLE;
 	if(!strcmp(id, "dnd"))
 		return JABBER_BUDDY_STATE_DND;
 	if(!strcmp(id, "offline"))
@@ -1965,6 +1969,7 @@ const struct {
 	{ "xa",        JABBER_BUDDY_STATE_XA },
 	{ "dnd",       JABBER_BUDDY_STATE_DND },
 	{ "offline",   JABBER_BUDDY_STATE_UNAVAILABLE },
+	{ "invisible", JABBER_BUDDY_STATE_INVISIBLE },
 	{ "error",     JABBER_BUDDY_STATE_ERROR },
 	{ NULL,        JABBER_BUDDY_STATE_UNKNOWN }
 };
@@ -2013,6 +2018,8 @@ const char *jabber_buddy_state_get_status_id(JabberBuddyState state) {
 			return "available";
 		case JABBER_BUDDY_STATE_ERROR:
 			return "error";
+	        case JABBER_BUDDY_STATE_INVISIBLE:
+			return "invisible";
 		case JABBER_BUDDY_STATE_UNAVAILABLE:
 			return "offline";
 	}
diff --git a/libpurple/protocols/jabber/buddy.h b/libpurple/protocols/jabber/buddy.h
index c09a402..5a4cb1f 100644
--- a/libpurple/protocols/jabber/buddy.h
+++ b/libpurple/protocols/jabber/buddy.h
@@ -32,6 +32,7 @@ typedef enum {
 	JABBER_BUDDY_STATE_CHAT,
 	JABBER_BUDDY_STATE_AWAY,
 	JABBER_BUDDY_STATE_XA,
+	JABBER_BUDDY_STATE_INVISIBLE,
 	JABBER_BUDDY_STATE_DND
 } JabberBuddyState;
 
diff --git a/libpurple/protocols/jabber/disco.c b/libpurple/protocols/jabber/disco.c
index d52deda..e6552d4 100644
--- a/libpurple/protocols/jabber/disco.c
+++ b/libpurple/protocols/jabber/disco.c
@@ -560,6 +560,9 @@ jabber_disco_server_info_result_cb(JabberStream *js, const char *from,
 			jabber_gmail_init(js);
 		} else if (!strcmp(NS_GOOGLE_ROSTER, var)) {
 			js->server_caps |= JABBER_CAP_GOOGLE_ROSTER;
+		} else if (!strcmp("google:shared-status", var)) {
+			js->server_caps |= JABBER_CAP_GOOGLE_SS;
+			jabber_google_ss_init(js);
 		} else if (!strcmp("http://jabber.org/protocol/commands", var)) {
 			js->server_caps |= JABBER_CAP_ADHOC;
 		} else if (!strcmp(NS_SIMPLE_BLOCKING, var)) {
diff --git a/libpurple/protocols/jabber/google.c b/libpurple/protocols/jabber/google.c
index 9884f91..8b72521 100644
--- a/libpurple/protocols/jabber/google.c
+++ b/libpurple/protocols/jabber/google.c
@@ -886,6 +886,107 @@ jabber_gmail_parse(JabberStream *js, const char *from,
 	}
 }
 
+void jabber_google_server_ss(JabberStream *js, const char *from,JabberIqType type, const char *id, xmlnode *query)
+{
+	if(type == JABBER_IQ_SET) {
+		PurpleAccount *account = purple_connection_get_account(js->gc);
+		PurplePresence *p;
+		PurpleStatus * c_status;
+		xmlnode * temp;
+		char *show_type, *message;
+		const char *sid, *invis;
+		int changed = 0;
+
+		sid = jabber_buddy_state_get_status_id(JABBER_BUDDY_STATE_ONLINE);
+
+		temp = xmlnode_get_child(query,"status");
+		message = xmlnode_get_data(temp);
+		temp = xmlnode_get_child(query,"show");
+		show_type = xmlnode_get_data(temp);
+		temp = xmlnode_get_child(query,"invisible");
+		invis = xmlnode_get_attrib(temp,"value");
+
+		if(show_type && !strcmp(show_type,"dnd"))
+			sid = jabber_buddy_state_get_status_id(JABBER_BUDDY_STATE_DND);
+		if(invis && !strcmp(invis,"true"))
+			sid = jabber_buddy_state_get_status_id(JABBER_BUDDY_STATE_INVISIBLE);
+
+
+		p = purple_account_get_presence(account);
+		c_status = purple_presence_get_active_status(p);
+
+		if(strcmp(purple_status_get_id(c_status),sid))
+			changed = 1;
+		else {
+			const char * c_msg = purple_status_get_attr_string(c_status, "message");
+			if( (c_msg == NULL && message != NULL) || (c_msg != NULL && message == NULL))
+				changed = 1;
+			else if(c_msg != NULL && message != NULL && strcmp(message,c_msg))
+				changed = 1;
+		}
+		
+		if(changed) {
+			if(message)
+				purple_account_set_status(account,sid,TRUE,"message",message,NULL);
+			else
+				purple_account_set_status(account,sid,TRUE,NULL);
+		}
+		return;
+	}
+}
+
+void jabber_google_ss_update(JabberStream * js, PurpleStatus * status)
+{
+        PurplePresence *presence;
+        const char *status_id;
+        const char *msg;
+	int f_state; /* 0 -- online, 1 - DND; 2 - Invisible */ 
+	JabberIq *iq;
+	xmlnode *query,*temp,*temp2;
+
+        presence = purple_status_get_presence(status);
+        status_id = purple_status_get_id(status);
+        msg = purple_status_get_attr_string(status, "message");
+	
+	f_state = 0;
+	if(!strcmp(status_id,jabber_buddy_state_get_status_id(JABBER_BUDDY_STATE_DND)))
+		f_state = 1;
+	else if(!strcmp(status_id,jabber_buddy_state_get_status_id(JABBER_BUDDY_STATE_INVISIBLE)))
+		f_state = 2;
+	
+	
+	iq = jabber_iq_new_query(js, JABBER_IQ_SET, "google:shared-status");
+	query = xmlnode_get_child(iq->node, "query");
+	xmlnode_set_attrib(query, "version", "2");
+
+	temp = xmlnode_new_child(query,"status");
+	xmlnode_insert_data(temp,msg,-1);
+
+	temp = xmlnode_new_child(query,"show");
+	if(f_state == 1)
+		xmlnode_insert_data(temp,"dnd",-1);
+	else
+		xmlnode_insert_data(temp,"default",-1);
+	
+	temp = xmlnode_new_child(query,"status-list");
+	xmlnode_set_attrib(temp,"show","default");
+	temp2 = xmlnode_new_child(temp,"status");
+	xmlnode_insert_data(temp2,msg,-1);
+
+	temp = xmlnode_new_child(query,"status-list");
+	xmlnode_set_attrib(temp,"show","dnd");
+	temp2 = xmlnode_new_child(temp,"status");
+	xmlnode_insert_data(temp2,msg,-1);
+
+	temp = xmlnode_new_child(query,"invisible");
+	if(f_state == 2)
+		xmlnode_set_attrib(temp,"value","true");
+	else
+		xmlnode_set_attrib(temp,"value","false");
+
+	jabber_iq_send(iq);
+}
+
 void
 jabber_gmail_poke(JabberStream *js, const char *from, JabberIqType type,
                   const char *id, xmlnode *new_mail)
@@ -950,6 +1051,19 @@ void jabber_gmail_init(JabberStream *js) {
 	jabber_iq_send(iq);
 }
 
+void jabber_google_ss_init(JabberStream *js)
+{
+	JabberIq *iq;
+	xmlnode *query;
+
+	iq = jabber_iq_new_query(js, JABBER_IQ_GET, "google:shared-status");
+	query = xmlnode_get_child(iq->node, "query");
+
+	xmlnode_set_attrib(query, "version", "2");
+
+	jabber_iq_send(iq);
+}
+
 void jabber_google_roster_outgoing(JabberStream *js, xmlnode *query, xmlnode *item)
 {
 	PurpleAccount *account = purple_connection_get_account(js->gc);
diff --git a/libpurple/protocols/jabber/google.h b/libpurple/protocols/jabber/google.h
index 3439fbf..8ab0510 100644
--- a/libpurple/protocols/jabber/google.h
+++ b/libpurple/protocols/jabber/google.h
@@ -34,6 +34,10 @@ void jabber_gmail_poke(JabberStream *js, const char *from, JabberIqType type,
 
 void jabber_google_roster_outgoing(JabberStream *js, xmlnode *query, xmlnode *item);
 
+void jabber_google_ss_init(JabberStream *js);
+void jabber_google_server_ss(JabberStream *js, const char *from,JabberIqType type, const char *id, xmlnode *query);
+void jabber_google_ss_update(JabberStream * js, PurpleStatus * status);
+
 /* Returns FALSE if this should short-circuit processing of this roster item, or TRUE
  * if this roster item should continue to be processed
  */
diff --git a/libpurple/protocols/jabber/iq.c b/libpurple/protocols/jabber/iq.c
index d18b70e..9ea1564 100644
--- a/libpurple/protocols/jabber/iq.c
+++ b/libpurple/protocols/jabber/iq.c
@@ -462,6 +462,7 @@ void jabber_iq_init(void)
 			jabber_gmail_poke);
 	jabber_iq_register_handler("new-mail", NS_GOOGLE_MAIL_NOTIFY,
 			jabber_gmail_poke);
+	jabber_iq_register_handler("query","google:shared-status",jabber_google_server_ss);
 	jabber_iq_register_handler("ping", NS_PING, jabber_ping_parse);
 	jabber_iq_register_handler("query", NS_GOOGLE_JINGLE_INFO,
 			jabber_google_handle_jingle_info);
diff --git a/libpurple/protocols/jabber/jabber.c b/libpurple/protocols/jabber/jabber.c
index ca4ef9d..14d4c0c 100644
--- a/libpurple/protocols/jabber/jabber.c
+++ b/libpurple/protocols/jabber/jabber.c
@@ -2197,10 +2197,21 @@ GList *jabber_status_types(PurpleAccount *account)
 			NULL);
 	types = g_list_append(types, type);
 
-	/*
-	if(js->protocol_version == JABBER_PROTO_0_9)
-		m = g_list_append(m, _("Invisible"));
-	*/
+	priority_value = purple_value_new(PURPLE_TYPE_INT);
+	purple_value_set_int(priority_value, 0);
+	buzz_enabled = purple_value_new(PURPLE_TYPE_BOOLEAN);
+	purple_value_set_boolean(buzz_enabled, TRUE);
+	type = purple_status_type_new_with_attrs(PURPLE_STATUS_INVISIBLE,
+			jabber_buddy_state_get_status_id(JABBER_BUDDY_STATE_INVISIBLE),
+			NULL, TRUE, TRUE, FALSE,
+			"priority", _("Priority"), priority_value,
+			"message", _("Message"), purple_value_new(PURPLE_TYPE_STRING),
+			"mood", _("Mood"), purple_value_new(PURPLE_TYPE_STRING),
+			"moodtext", _("Mood Text"), purple_value_new(PURPLE_TYPE_STRING),
+			"nick", _("Nickname"), purple_value_new(PURPLE_TYPE_STRING),
+			"buzz", _("Allow Buzz"), buzz_enabled,
+			NULL);
+	types = g_list_append(types, type);
 
 	type = purple_status_type_new_with_attrs(PURPLE_STATUS_OFFLINE,
 			jabber_buddy_state_get_status_id(JABBER_BUDDY_STATE_UNAVAILABLE),
diff --git a/libpurple/protocols/jabber/jabber.h b/libpurple/protocols/jabber/jabber.h
index 75d0f21..cbd2956 100644
--- a/libpurple/protocols/jabber/jabber.h
+++ b/libpurple/protocols/jabber/jabber.h
@@ -49,6 +49,7 @@ typedef enum {
 	JABBER_CAP_ITEMS          = 1 << 14,
 	JABBER_CAP_ROSTER_VERSIONING = 1 << 15,
 
+	JABBER_CAP_GOOGLE_SS      = 1 << 17,
 	JABBER_CAP_RETRIEVED      = 1 << 31
 } JabberCapabilities;
 
diff --git a/libpurple/protocols/jabber/presence.c b/libpurple/protocols/jabber/presence.c
index b1ffa21..84b2fb4 100644
--- a/libpurple/protocols/jabber/presence.c
+++ b/libpurple/protocols/jabber/presence.c
@@ -157,6 +157,9 @@ void jabber_presence_send(JabberStream *js, gboolean force)
 		return;
 	}
 
+	if(js->server_caps & JABBER_CAP_GOOGLE_SS)
+		jabber_google_ss_update(js,status);
+
 	purple_status_to_jabber(status, &state, &stripped, &priority);
 
 	/* check for buzz support */
diff --git a/pidgin/gtkstatusbox.c b/pidgin/gtkstatusbox.c
index e35fd66..d27897f 100644
--- a/pidgin/gtkstatusbox.c
+++ b/pidgin/gtkstatusbox.c
@@ -301,10 +301,12 @@ update_to_reflect_account_status(PidginStatusBox *status_box, PurpleAccount *acc
 static void
 account_status_changed_cb(PurpleAccount *account, PurpleStatus *oldstatus, PurpleStatus *newstatus, PidginStatusBox *status_box)
 {
-	if (status_box->account == account)
-		update_to_reflect_account_status(status_box, account, newstatus);
-	else if (status_box->token_status_account == account)
+	if (status_box->account == account) {
+		update_to_reflect_account_status(status_box, account, newstatus); }
+	else{
 		status_menu_refresh_iter(status_box, TRUE);
+		pidgin_status_box_refresh(status_box);
+	}
 }
 
 static gboolean
